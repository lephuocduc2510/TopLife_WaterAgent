import React, { useState, useEffect } from 'react'
import { useParams, useNavigate } from 'react-router-dom'
import { Button } from 'primereact/button'
import { Card } from 'primereact/card'
import { Badge } from 'primereact/badge'
import { Divider } from 'primereact/divider'
import { TabView, TabPanel } from 'primereact/tabview'
import { InputText } from 'primereact/inputtext'
import { InputTextarea } from 'primereact/inputtextarea'
import { Toast } from 'primereact/toast'
import { Rating } from 'primereact/rating'
import { productData, testimonials } from '../../data/productData'
import './ProductDetail.css'

const ProductDetail = () => {
  const { slug } = useParams()
  const navigate = useNavigate()
  const [product, setProduct] = useState(null)
  const [activeImageIndex, setActiveImageIndex] = useState(0)
  const [quantity, setQuantity] = useState(1)
  const [customerName, setCustomerName] = useState('')
  const [customerPhone, setCustomerPhone] = useState('')
  const [customerEmail, setCustomerEmail] = useState('')
  const [customerMessage, setCustomerMessage] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const toast = React.useRef(null)

  useEffect(() => {
    const foundProduct = productData.find(p => p.slug === slug)
    if (foundProduct) {
      setProduct(foundProduct)
    } else {
      navigate('/san-pham')
    }
  }, [slug, navigate])

  const handleQuantityChange = (type) => {
    if (type === 'increase') {
      setQuantity(prev => prev + 1)
    } else if (type === 'decrease' && quantity > 1) {
      setQuantity(prev => prev - 1)
    }
  }

  const handleOrderNow = () => {
    if (!customerName || !customerPhone) {
      toast.current.show({
        severity: 'warn',
        summary: 'Th√¥ng b√°o',
        detail: 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß h·ªç t√™n v√† s·ªë ƒëi·ªán tho·∫°i',
        life: 3000
      })
      return
    }

    const message = `üî• ƒê·∫∂T H√ÄNG N∆Ø·ªöC TOPLIFE üî•
    
üì¶ S·∫£n ph·∫©m: ${product.name}
üìä S·ªë l∆∞·ª£ng: ${quantity} chai
üë§ Kh√°ch h√†ng: ${customerName}
üìû ƒêi·ªán tho·∫°i: ${customerPhone}
üìß Email: ${customerEmail || 'Kh√¥ng c√≥'}
üí¨ Ghi ch√∫: ${customerMessage || 'Kh√¥ng c√≥'}

Vui l√≤ng li√™n h·ªá l·∫°i ƒë·ªÉ x√°c nh·∫≠n ƒë∆°n h√†ng. C·∫£m ∆°n qu√Ω kh√°ch!`

    const phoneNumber = '0926967979'
    const whatsappUrl = `https://wa.me/${phoneNumber}?text=${encodeURIComponent(message)}`
    window.open(whatsappUrl, '_blank')

    // Show success message
    toast.current.show({
      severity: 'success',
      summary: 'ƒê·∫∑t h√†ng th√†nh c√¥ng',
      detail: 'Ch√∫ng t√¥i s·∫Ω li√™n h·ªá l·∫°i v·ªõi b·∫°n s·ªõm nh·∫•t!',
      life: 5000
    })
  }

  const handleContactForm = async () => {
    if (!customerName || !customerPhone || !customerMessage) {
      toast.current.show({
        severity: 'warn',
        summary: 'Th√¥ng b√°o',
        detail: 'Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin li√™n h·ªá',
        life: 3000
      })
      return
    }

    setIsLoading(true)

    try {
      // Simulate API call
      await new Promise(resolve => setTimeout(resolve, 1000))

      const message = `üìû LI√äN H·ªÜ T∆Ø V·∫§N üìû
      
üë§ H·ªç t√™n: ${customerName}
üìû ƒêi·ªán tho·∫°i: ${customerPhone}
üìß Email: ${customerEmail || 'Kh√¥ng c√≥'}
üí¨ N·ªôi dung: ${customerMessage}

Vui l√≤ng li√™n h·ªá l·∫°i ƒë·ªÉ t∆∞ v·∫•n chi ti·∫øt. C·∫£m ∆°n!`

      const phoneNumber = '0926967979'
      const whatsappUrl = `https://wa.me/${phoneNumber}?text=${encodeURIComponent(message)}`
      window.open(whatsappUrl, '_blank')

      toast.current.show({
        severity: 'success',
        summary: 'G·ª≠i li√™n h·ªá th√†nh c√¥ng',
        detail: 'Ch√∫ng t√¥i s·∫Ω ph·∫£n h·ªìi trong th·ªùi gian s·ªõm nh·∫•t!',
        life: 5000
      })

      // Reset form
      setCustomerName('')
      setCustomerPhone('')
      setCustomerEmail('')
      setCustomerMessage('')
    } catch (error) {
      toast.current.show({
        severity: 'error',
        summary: 'L·ªói',
        detail: 'C√≥ l·ªói x·∫£y ra, vui l√≤ng th·ª≠ l·∫°i!',
        life: 3000
      })
    } finally {
      setIsLoading(false)
    }
  }

  if (!product) {
    return <div>Loading...</div>
  }

  return (
    <div className="product-detail-page">
      <Toast ref={toast} />
      
      {/* Breadcrumb */}
      <div className="product-breadcrumb">
        <div className="container">
          <nav className="custom-breadcrumb">
            <a href="/" className="breadcrumb-item">
              <i className="pi pi-home"></i>
              Trang ch·ªß
            </a>
            <span className="breadcrumb-separator">/</span>
            <a href="/san-pham" className="breadcrumb-item">S·∫£n ph·∫©m</a>
            <span className="breadcrumb-separator">/</span>
            <span className="breadcrumb-current">{product.name}</span>
          </nav>
        </div>
      </div>

      {/* Product Detail Content */}
      <div className="product-detail-content">
        <div className="container">
          <div className="product-detail-layout">
            {/* Product Images */}
            <div className="product-images">
              <div className="main-image">
                <img src={product.image} alt={product.name} />
                <Badge value="CH√çNH H√ÉNG" className="authentic-badge" />
              </div>
            </div>

            {/* Product Info */}
            <div className="product-info">
              <h1 className="product-title">{product.name}</h1>
              <div className="product-rating">
                <Rating value={5} readOnly stars={5} cancel={false} />
                <span className="rating-text">(ƒê√°nh gi√° 5/5 t·ª´ kh√°ch h√†ng)</span>
              </div>
              
              <div className="product-description">
                <p>{product.description}</p>
              </div>

              <div className="product-features">
                <h3>ƒê·∫∑c ƒëi·ªÉm n·ªïi b·∫≠t:</h3>
                <ul>
                  {product.features.map((feature, index) => (
                    <li key={index}>
                      <i className="pi pi-check-circle"></i>
                      {feature}
                    </li>
                  ))}
                </ul>
              </div>

              <div className="product-specs-quick">
                <div className="spec-item">
                  <strong>Dung t√≠ch:</strong> {product.capacity}
                </div>
                <div className="spec-item">
                  <strong>Ph√π h·ª£p:</strong> {product.usage}
                </div>
                <div className="spec-item">
                  <strong>Ch·∫•t li·ªáu:</strong> {product.material}
                </div>
                <div className="spec-item">
                  <strong>H·∫°n s·ª≠ d·ª•ng:</strong> {product.shelfLife}
                </div>
              </div>

              {/* Order Section */}
              <div className="order-section">
                <h3>ƒê·∫∂T N∆Ø·ªöC NGAY</h3>
                <div className="quantity-selector">
                  <label>S·ªë l∆∞·ª£ng:</label>
                  <div className="quantity-controls">
                    <Button 
                      icon="pi pi-minus" 
                      onClick={() => handleQuantityChange('decrease')}
                      className="quantity-btn"
                      disabled={quantity <= 1}
                    />
                    <span className="quantity-display">{quantity}</span>
                    <Button 
                      icon="pi pi-plus" 
                      onClick={() => handleQuantityChange('increase')}
                      className="quantity-btn"
                    />
                  </div>
                </div>

                <div className="customer-info">
                  <div className="form-row">
                    <InputText 
                      placeholder="H·ªç v√† t√™n *" 
                      value={customerName}
                      onChange={(e) => setCustomerName(e.target.value)}
                      className="customer-input"
                    />
                    <InputText 
                      placeholder="S·ªë ƒëi·ªán tho·∫°i *" 
                      value={customerPhone}
                      onChange={(e) => setCustomerPhone(e.target.value)}
                      className="customer-input"
                    />
                  </div>
                  <InputText 
                    placeholder="Email (kh√¥ng b·∫Øt bu·ªôc)" 
                    value={customerEmail}
                    onChange={(e) => setCustomerEmail(e.target.value)}
                    className="customer-input"
                  />
                  <InputTextarea 
                    placeholder="Ghi ch√∫ ƒë∆°n h√†ng (kh√¥ng b·∫Øt bu·ªôc)" 
                    value={customerMessage}
                    onChange={(e) => setCustomerMessage(e.target.value)}
                    className="customer-textarea"
                    rows={3}
                  />
                </div>

                <Button 
                  label="ƒê·∫∂T H√ÄNG NGAY"
                  icon="pi pi-shopping-cart"
                  className="order-btn"
                  onClick={handleOrderNow}
                />

                <div className="contact-info">
                  <div className="hotline">
                    <i className="pi pi-phone"></i>
                    <span>HOTLINE: <strong>0926 96 79 79</strong></span>
                  </div>
                  <div className="working-hours">
                    <i className="pi pi-clock"></i>
                    <span>Th·ª© 2 - Th·ª© 7: 7h - 11h30, 13h - 16h30</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Product Details Tabs */}
      <div className="product-tabs-section">
        <div className="container">
          <TabView className="product-tabs">
            <TabPanel header="M√¥ t·∫£ s·∫£n ph·∫©m" leftIcon="pi pi-info-circle">
              <div className="tab-content">
                <h3>Gi·ªõi thi·ªáu chi ti·∫øt</h3>
                <p>{product.detailDescription}</p>
                
                <h4>∆Øu ƒëi·ªÉm v∆∞·ª£t tr·ªôi:</h4>
                <ul>
                  <li>Ngu·ªìn n∆∞·ªõc thi√™n nhi√™n s·∫°ch t·ª´ c√°c v√πng n√∫i cao</li>
                  <li>C√¥ng ngh·ªá l·ªçc RO hi·ªán ƒë·∫°i, lo·∫°i b·ªè 99.9% t·∫°p ch·∫•t</li>
                  <li>Quy tr√¨nh s·∫£n xu·∫•t kh√©p k√≠n, ƒë·∫£m b·∫£o v·ªá sinh</li>
                  <li>Ch·ª©ng nh·∫≠n ch·∫•t l∆∞·ª£ng ISO 22000:2018</li>
                  <li>ƒê·∫°t chu·∫©n QCVN 01:2018/BYT c·ªßa B·ªô Y t·∫ø</li>
                </ul>

                <h4>Th√†nh ph·∫ßn dinh d∆∞·ª°ng:</h4>
                <div className="nutrition-table">
                  <table>
                    <tbody>
                      <tr>
                        <td>pH</td>
                        <td>6.5 - 8.5</td>
                      </tr>
                      <tr>
                        <td>TDS (t·ªïng ch·∫•t r·∫Øn h√≤a tan)</td>
                        <td>50 - 300 mg/L</td>
                      </tr>
                      <tr>
                        <td>ƒê·ªô c·ª©ng t·ªïng</td>
                        <td>‚â§ 300 mg/L CaCO3</td>
                      </tr>
                      <tr>
                        <td>Clorua</td>
                        <td>‚â§ 250 mg/L</td>
                      </tr>
                    </tbody>
                  </table>
                </div>
              </div>
            </TabPanel>

            <TabPanel header="Th√¥ng s·ªë k·ªπ thu·∫≠t" leftIcon="pi pi-cog">
              <div className="tab-content">
                <h3>Th√¥ng s·ªë chi ti·∫øt</h3>
                <div className="specs-grid">
                  {Object.entries(product.specifications).map(([key, value]) => (
                    <div key={key} className="spec-row">
                      <span className="spec-label">
                        {key === 'capacity' && 'Dung t√≠ch'}
                        {key === 'weight' && 'Tr·ªçng l∆∞·ª£ng'}
                        {key === 'height' && 'Chi·ªÅu cao'}
                        {key === 'diameter' && 'ƒê∆∞·ªùng k√≠nh'}
                        {key === 'material' && 'Ch·∫•t li·ªáu'}
                        {key === 'capType' && 'Lo·∫°i n·∫Øp'}
                        {key === 'packaging' && 'Quy c√°ch ƒë√≥ng g√≥i'}
                      </span>
                      <span className="spec-value">{value}</span>
                    </div>
                  ))}
                </div>

                <h4>Quy c√°ch b·∫£o qu·∫£n:</h4>
                <ul>
                  <li>B·∫£o qu·∫£n n∆°i kh√¥ r√°o, tho√°ng m√°t</li>
                  <li>Tr√°nh √°nh n·∫Øng tr·ª±c ti·∫øp</li>
                  <li>Nhi·ªát ƒë·ªô b·∫£o qu·∫£n: 5¬∞C - 25¬∞C</li>
                  <li>Sau khi m·ªü n·∫Øp, n√™n s·ª≠ d·ª•ng trong v√≤ng 3 ng√†y</li>
                  <li>Kh√¥ng ƒë·ªÉ g·∫ßn ngu·ªìn nhi·ªát ho·∫∑c h√≥a ch·∫•t</li>
                </ul>
              </div>
            </TabPanel>

            <TabPanel header="√ù ki·∫øn kh√°ch h√†ng" leftIcon="pi pi-users">
              <div className="tab-content">
                <h3>Ph·∫£n h·ªìi t·ª´ kh√°ch h√†ng</h3>
                <div className="testimonials-list">
                  {testimonials.slice(0, 2).map((testimonial) => (
                    <Card key={testimonial.id} className="testimonial-card">
                      <div className="testimonial-header">
                        <img src={testimonial.avatar} alt={testimonial.name} className="testimonial-avatar" />
                        <div className="testimonial-info">
                          <h4>{testimonial.name}</h4>
                          <p>{testimonial.position}</p>
                          <Rating value={5} readOnly stars={5} cancel={false} />
                        </div>
                      </div>
                      <p className="testimonial-content">"{testimonial.content}"</p>
                    </Card>
                  ))}
                </div>
              </div>
            </TabPanel>

            <TabPanel header="Li√™n h·ªá ƒë·∫∑t n∆∞·ªõc" leftIcon="pi pi-phone">
              <div className="tab-content">
                <h3>LI√äN H·ªÜ ƒê·∫∂T N∆Ø·ªöC</h3>
                <div className="contact-form-section">
                  <div className="contact-form">
                    <div className="form-row">
                      <InputText 
                        placeholder="H·ªç t√™n *" 
                        value={customerName}
                        onChange={(e) => setCustomerName(e.target.value)}
                      />
                      <InputText 
                        placeholder="Email" 
                        value={customerEmail}
                        onChange={(e) => setCustomerEmail(e.target.value)}
                      />
                    </div>
                    <InputText 
                      placeholder="ƒêi·ªán tho·∫°i *" 
                      value={customerPhone}
                      onChange={(e) => setCustomerPhone(e.target.value)}
                    />
                    <InputTextarea 
                      placeholder="N·ªôi dung *" 
                      value={customerMessage}
                      onChange={(e) => setCustomerMessage(e.target.value)}
                      rows={4}
                    />
                    <Button 
                      label="G·ª¨I TIN NH·∫ÆN"
                      icon="pi pi-send"
                      className="submit-btn"
                      onClick={handleContactForm}
                      loading={isLoading}
                    />
                  </div>

                  <div className="contact-info-detailed">
                    <h4>Th√¥ng tin li√™n h·ªá:</h4>
                    <div className="contact-item">
                      <i className="pi pi-map-marker"></i>
                      <span>ƒê√† N·∫µng, Vi·ªát Nam</span>
                    </div>
                    <div className="contact-item">
                      <i className="pi pi-phone"></i>
                      <span>0926 96 79 79</span>
                    </div>
                    <div className="contact-item">
                      <i className="pi pi-envelope"></i>
                      <span>kdtoplife@gmail.com</span>
                    </div>
                    
                    <h4>Th·ªùi gian ho·∫°t ƒë·ªông:</h4>
                    <div className="working-time">
                      <p><strong>Th·ª© 2 - Th·ª© 6:</strong> S√°ng 7h ƒë·∫øn 11h30, Chi·ªÅu 1h - 4h30</p>
                      <p><strong>Th·ª© 7:</strong> S√°ng 7h ƒë·∫øn 11h30, Chi·ªÅu 1h - 4h30</p>
                      <p><strong>Ch·ªß nh·∫≠t:</strong> NGH·ªà</p>
                    </div>
                  </div>
                </div>
              </div>
            </TabPanel>
          </TabView>
        </div>
      </div>

      {/* Related Products */}
      <div className="related-products-section">
        <div className="container">
          <h3>S·∫£n ph·∫©m kh√°c</h3>
          <div className="related-products-grid">
            {productData
              .filter(p => p.id !== product.id)
              .map((relatedProduct) => (
                <Card key={relatedProduct.id} className="related-product-card">
                  <img src={relatedProduct.image} alt={relatedProduct.name} />
                  <h4>{relatedProduct.name}</h4>
                  <p>{relatedProduct.capacity}</p>
                  <Button 
                    label="Xem chi ti·∫øt"
                    className="view-detail-btn"
                    onClick={() => navigate(`/san-pham/${relatedProduct.slug}`)}
                  />
                </Card>
              ))}
          </div>
        </div>
      </div>
    </div>
  )
}

export default ProductDetail
